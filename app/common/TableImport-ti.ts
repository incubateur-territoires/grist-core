/**
 * This module was automatically generated by `ts-interface-builder`
 */
import * as t from "ts-interface-checker";
// tslint:disable:object-literal-key-quotes

export const TableImportRequestBody = t.iface([], {
  "source": t.union(t.iface([], {
    "upload": "number",
  }), t.iface([], {
    "url": "string",
  })),
  "tables": t.array(t.iface([], {
    "source": t.opt("string"),
    "target": t.union(t.iface([], {
      "new": "NewTableOptions",
    }), t.iface([], {
      "existing": "ExistingTableOptions",
    })),
  })),
  "parseOptions": t.opt(t.union("CsvParseOptions", "JsonParseOptions")),
});

export const NewTableOptions = t.iface([], {
  "name": t.opt("string"),
  "columns": t.array(t.iface([], {
    "source": "string",
    "id": t.opt("string"),
    "fields": t.opt(t.iface([], {
      "label": t.opt("string"),
      "type": t.opt("string"),
      "widgetOptions": t.opt(t.union("string", "object")),
    })),
  })),
});

export const ExistingTableOptions = t.iface([], {
  "id": t.opt(t.union("string", "number")),
  "columns": t.array(t.iface([], {
    "source": "string",
    "id": t.opt(t.union("string", "number")),
    "rawReferences": t.opt("boolean"),
  })),
  "merge": t.opt(t.iface([], {
    "targetColumns": t.array(t.union("string", "number")),
    "strategy": t.union(t.lit('replace-with-nonblank-source'), t.lit('replace-all-fields'), t.lit('replace-blank-fields-only')),
  })),
});

export const CsvParseOptions = t.iface([], {
  "lineTerminator": t.opt("string"),
  "fieldSeparator": t.opt("string"),
  "quoteChar": t.opt("string"),
  "doubleQuote": t.opt("boolean"),
  "firstRowIsHeader": t.opt("boolean"),
  "skipLeadingSpace": t.opt("boolean"),
  "encoding": t.opt("string"),
});

export const JsonParseOptions = t.iface([], {
  "include": t.opt(t.array("string")),
  "exclude": t.opt(t.array("string")),
});

const exportedTypeSuite: t.ITypeSuite = {
  TableImportRequestBody,
  NewTableOptions,
  ExistingTableOptions,
  CsvParseOptions,
  JsonParseOptions,
};
export default exportedTypeSuite;
